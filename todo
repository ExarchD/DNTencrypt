create message id hash for simplifying checks between the gui and the conversation object. 

hard mode: conversations are stored only as a series of hashes and encrypted messages. When you wish to continue a conversation, you input the members, the title and salt of the conversation. Then the history will be able to load. 

also be able to turn off conversation logging.



clientside:

	decryption:
		it seems i can't create my own gpg key manager
		I see two routes, use the gpg-agent as suggested
		go passwordless and keep the key on a keychain. No smartphone support then

	crash protection:
		have an 'active state' checker. On normal exit, record 1, else while running record 0. If the client opens and the state is still zero, then check server for old messages or ask for log files.

	the side bar:
		filters message history
		#sets the gpg keys to be used 

		#the filling of the key ring should probably only happen after the send button is pushed
		#(no longer relevant)create a seperate list of emails and compare if they match, can be sorted alphanumerically


serverside:

	short term:
		index the messages with the dates
		no...index the messages with iteration numbers. Store only ~10-20 messages locally
		or store none but keep an index and otherwise act as an irc

	long term:
		import everyone's public key for indexing of messages. 
		figure out how irc works and implement
		create torrents for sufficiently large log files (serverside or client?)





use hash of first encrypted message as identifier

#include <boost/functional/hash.hpp>

int hashCode()
{
    boost::hash<std::string> string_hash;

    return string_hash("Hash me");
}





using dht:
	create dht, create nodes, each client acts as a node but there are also server nodes. 

	the only thing that server nodes do differently is mark an increment, this is to identify whats the current message number, keeping track of all messages
	an identification hash is made via the participants and the current message number. This hash serves to identify all messages. If a user logs on and has missed some messages, these messages can be identified and requested (outside the standard dht network) dropped in an encrypted file and p2p'd to the user. Once they arrive they will be properly sorted via the indexing number.

	indexing number is always decided by the server and based on a hash of participants. (local, distributed saving of recent messages?) nodes save messages? bounce messages to different nodes, just to keep recent messages alive




######
hmmm...how do we indicate that there is a new chat in the first place, how do we get everyone on the same page?
//	silent message from the server, again with a status counter? we just check for messages from the server? no...server needs our keys
//	dht message? no... only online members would get the indicator. 
//	external indication? send a message saying, hey, i started a chat with x participants?...no...don't like it

	x direct messages, encrypted individually to each participant, within is the participant lists. This message is silent and only checked for occasionally. how do we hash it...? with the recipient, and an index. If the hash already exists then the server rejects and the sender increments the index. 
	when the recipient sees one new chat, they will check for another, if it doesn't exist, then quit, otherwise iterate.
	once the silent message is recieved it is told to delete itself.


	Topics for differnt chats can be stored within the encrypted message as a header, also silent.
	

we should mark messages that have excess participants, find a way of adding members to conversations. log sharing and re-encrypting.

or just say screw it...have them all on a central server, indexed by hash(#+recipients) supplied by the users.
again, the client has a number and the server has a number. We check for missing numbers and request the hashes from the server.
(requests are also encrypted by the servers pub key?)
occasionally the client will request a random message it can't read and throw it away to prevent tracking of certain messages.


or...we store each message, a hash, the number of participants, and the number of participants that have recieved the message...then toss the message after a while or after all have recieved it.



or...we store each message until a delete message is sent from a client. the delete message is sent when all parties confirm the message is held or sufficient time has passed. The server then needs a hash, message...nothing else.
checks will be made by the client each time it recieves a message...silent messages that indicate completeness sent to the server? 
status messages are hard

server/node saves message, hash of message, and n hashes(which are deleted appropriately when checked by users)
if we want to know read status, then we continue to check these same messages until they are deleted.


delete is completed after random number of seconds(probably not necessary...unless we're going super secret) 

dht could be used in this method to get rid of central servers, but i think server nodes will work just fine, iterate over nodes until the container node is found. Messages could be deposited at random to nodes, it doesn't matter since each message is handled by a hash. deposit message on multiple nodes, delete commands need to iterate over all nodes.

Is this essentially dht?




######




questions:
	how do i make the request to all the clients with the missing messages? a silent message, equally encrypted but with command words? 
	how do i check if a given client is online?

every time we connect we check for missing messages between what is local and what number the server indicated, if there are some, then we generate hash values for each missing number and send the request to the group. This message is not indexed or saved. Only online clients can help. If there are no online clients, then the request is made once online clients appear...some of the messages may be available on nodes.



