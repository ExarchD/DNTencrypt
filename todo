clientside:

	decryption:
		it seems i can't create my own gpg key manager
		I see two routes, use the gpg-agent as suggested
		go passwordless and keep the key on a keychain. No smartphone support then

	crash protection:
		have an 'active state' checker. On normal exit, record 1, else while running record 0. If the client opens and the state is still zero, then check server for old messages or ask for log files.

	the side bar:
		filters message history
		#sets the gpg keys to be used 

		#the filling of the key ring should probably only happen after the send button is pushed
		#(no longer relevant)create a seperate list of emails and compare if they match, can be sorted alphanumerically


serverside:

	short term:
		index the messages with the dates
		no...index the messages with iteration numbers. Store only ~10-20 messages locally
		or store none but keep an index and otherwise act as an irc

	long term:
		import everyone's public key for indexing of messages. 
		figure out how irc works and implement
		create torrents for sufficiently large log files (serverside or client?)





use hash of first encrypted message as identifier

#include <boost/functional/hash.hpp>

int hashCode()
{
    boost::hash<std::string> string_hash;

    return string_hash("Hash me");
}
